#!/bin/bash

PREFIX_PATH="${WPP:-~/.local/share/wineprefixes}"

# echo $PREFIX_PATH
# exit 0

# winebin="/opt/wine-staging-git/bin/wine"
# export WINE="$winebin"

winebin="${WINE:-/usr/bin/wine}"

STEAM_PREFIX="steam"
STEAM_LOC="drive_c/Program Files/Steam"

enable_csmt() {

    cat > /tmp/d3dstream.reg <<_EOF_
REGEDIT4
[HKEY_CURRENT_USER\Software\Wine\DLLRedirects]
"wined3d"="wined3d-csmt.dll"
_EOF_
    $winebin regedit /S /tmp/d3dstream.reg
    rm /tmp/d3dstream.reg
}

disable_csmt() {

    cat > /tmp/d3dstream.reg <<_EOF_
REGEDIT4
[HKEY_CURRENT_USER\Software\Wine\DLLRedirects]
"wined3d"="wined3d.dll"
_EOF_
    $winebin regedit /S /tmp/d3dstream.reg
    rm /tmp/d3dstream.reg
}

install_steam() {
    cp -av "${PREFIX_PATH}/${STEAM_PREFIX}/${STEAM_LOC}" "${WINEPREFIX}/${STEAM_LOC}"
    winetricks --force --no-isolate steam
}

get_wine_bin(){
    local wbin_options=('/usr'
                        '/opt/wine-staging'
                        '/opt/wine-compholio'
                        '/opt/wine-staging-git')
    declare -a disp_opts
    local i=-1
    for o in "${wbin_options[@]}" ; do
        let i+=1
        [ -f "$o/bin/wine" ] || continue
        [ "$o" == '/usr' ] && disp_opts[$i]="system default" && continue
        disp_opts[$i]="$(basename $o)"
    done

    local PS3="#> "
    select wbin in "${disp_opts[@]}"; do
         [ ! -z "$wbin" ] && wbin="${wbin_options[$REPLY-1]}" && break
    done

    test -z "$wbin" && echo "WINE var unchanged ($WINE)" && return

    WINE="$wbin/bin/wine"
#     export WINE
    echo "WINE=$WINE"
}

select_wine_prefix() {
    Plist=( $(find $WPP/ -mindepth 1 -maxdepth 1 -type d ) )

    local PS3="==> Select desired wineprefix: "
    declare -a options
    options[0]="Create new..."
    for (( i=1; i<=${#Plist[*]}; i++ )) ; do
      options[$i]="$(basename ${Plist[$i-1]})"

      #if the cwd is under a prefix directory, set to that prefix
        if [[ -z "$WINEPREFIX" && ( "$(echo $PWD | cut -d '/' -f 1-5)" == "${PREFIX_PATH}/${options[$i]}" ) ]] ; then
            #export WINEPREFIX="$PREFIX_PATH/${options[$i]}"
            echo "export WINEPREFIX=$PREFIX_PATH/${options[$i]}" > "$OUTFILE"

#             echo "WINEPREFIX set to $WINEPREFIX"
#             echo "  (run wprefix_set again to change)"
            return
        fi
    done

    echo -e "\nAvailable Prefixes:"
    select prefix in "${options[@]}"; do
        [ 1 -lt $REPLY ] && [ $(( $REPLY-1 )) -le "${#Plist[@]}" ] && \
            echo "export WINEPREFIX=${Plist[$REPLY-2]}" > "$OUTFILE" && break

        [ $REPLY -eq 1 ] && new_prefix && break
        echo -e "\nInvalid selection. Please try again.\n" >&2
    done
}

 #-- Create new 32-bit wine prefix
new_prefix() {

    local wineopts="WINEARCH=win32"

    if [[ $# -eq 0 ]] ; then
        read -p "Enter name of new prefix: " newprefix discard
    else
        newprefix="$1"
    fi

    if [[ -d "$PREFIX_PATH/$newprefix" ]] ; then
        echo -e "\nError: specified prefix already exists.\n" >&2
    else
        wineopts="$wineopts WINEPREFIX=$PREFIX_PATH/$newprefix"
        env $wineopts wineboot
        echo "export WINEPREFIX=$PREFIX_PATH/$newprefix" > "$OUTFILE"
    fi
}

Usage="\n\n
    Option \tFunction\n
    ------ \t--------\n
      -c\t\tenable csmt\n
      -d\t\tdisable csmt\n
      -i\t\tinstall steam\n
      -b\t\tselect wine binary\n
      -s\t\tselect wine prefix\n
      -n\t\tcreate new prefix\n
      -o FILE \tdesignate the file to which -s, -b, and -n will write their output;\n
      \t\tsource this file to export the proper variable into the environment.
"

[ $# -eq 0 ] && {
    echo -e "usage: ${0##*/} -[bcdins]" $Usage
    exit 1
}

cmd="exit 111"
OUTFILE=/dev/fd/1 #stdout by default
while getopts :bcdinsho: OPT; do
    case $OPT in
    c)
        cmd=enable_csmt
        ;;
    d)
        cmd=disable_csmt
        ;;
    i)
        cmd=install_steam
        ;;
    b)
        cmd=get_wine_bin
        ;;
    s)
        cmd=select_wine_prefix
        ;;
    n)
        cmd=new_prefix
        ;;
    h)
        echo -e "usage: ${0##*/} -[bcdins]" $Usage
        exit 0
        ;;
    o)
        OUTFILE="$OPTARG"
        ;;
    *)
        echo -e "usage: ${0##*/} -[bcdins]" $Usage
        exit 2
    esac

done
shift $(( OPTIND - 1 ))
OPTIND=1

$cmd
