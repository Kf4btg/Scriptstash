#!/bin/bash
## Author kf4btg
## Outputs a pretty table of available updates on a pacman-based system.
## Requires that the "checkupdates" utility has been run beforehand.

## Playing with little_boxes[1] for silly fancy output (therefore this
## now requires little_boxes for the AUR output).
##
## [1]https://github.com/giodamelio/little_boxes


## ENV Vars
# CHECKUPDATES_DB - location of secondary database for fakeroot check
#   default /tmp/checkup-db-[USERNAME]
CHECKUPDATES_DB="/tmp/checkup-db-$USER"

## place to dump updates before displaying them
_tmpfile=/tmp/_pkgupds

# AUR package cache directory
d_pkgcache="${JENV_PACKAGES:-/home/DATA/pkgcache}"

# define default options
typeset -A Uoptions
Uoptions['U']=1  # show repo updates
Uoptions['A']=1  # show AUR updates
Uoptions['C']=0  # use cached results for AUR updates
Uoptions['c']=1  # use color

updates() {
    ## Check that alt-database exists; if not, run checkupdates to create it
    [ -d "$CHECKUPDATES_DB" ] || checkupdates &>/dev/null

    ## clear tempfile
    :> "$_tmpfile" 
    pacman -Qu --dbpath $CHECKUPDATES_DB 2>/dev/null > "$_tmpfile"

    ## if there are any updates
    upd_count=$(cat "$_tmpfile" | wc -l)
    if [ $upd_count -gt 0 ] ; then

        ## add color to output if enabled
        if [ ${Uoptions['c']} -gt 0 ] ; then

            ## source the bash color-defs file
            source $HOME/.profile.d/bash_colors 
            
                ## Since ANSI color codes confuse the 'column' utility, we'll
                ## columnize it beforehand then use sed to insert the color codes
                ## into the pre-formatted table. Sed backrefs:
                #   1      2       3         4     5        6      7
                # (name)(spaces)(old-ver)(spaces)(arrow)(spaces)(newver)
            
            column -t $_tmpfile | sed -r 's/^([^ ]+)([ ]+)([^ ]+)([ ]+)([^ ]+)([ ]+)([^ ]+)/\'"\e[1m"'\1\2\'${BRed}'\3\4\'${Color_Off}'\5\6\'${BGreen}'\7\'${Color_Off}'/g' > $_tmpfile-color
            
            
            echo -e "\n$(cat $_tmpfile-color)"
            

        else
            ## just print the results in columns
            column -t $_tmpfile
            # let's try something silly
    #        column -t $_tmpfile | little_boxes -t "Total available repo updates: $upd_count"
        fi
    fi
    #else
        echo -e "Total available repo updates: $upd_count\n"
    #fi

    #echo; echo "Total available repo updates: $upd_count" 
}

aurpdates() {
    ## and now print updates from AUR
    
    # Unless we're using cached results, update the package list
    [[ ${Uoptions['C']} -eq 0 ]] && package-query -Au | sed -r 's#aur/##g' > "$d_pkgcache/.aurupdates"
    
    ## add color to output if enabled
    if [ ${Uoptions['c']} -gt 0 ] ; then
    
        BOLD=$'\033[1m'
        RED=$'\033[1;31m'
        GREEN=$'\033[1;32m'
        OFF=$'\033[0m'


        #echo -e "\n$(package-query -Au | sed -r 's#aur/##g' | column -o'   ' -t)\n" \ 
        echo -e "\n$(column -o'   ' -t < "$d_pkgcache/.aurupdates" )\n" \
        | little_boxes -c double -t "Available updates to AUR packages" \
        | awk 'NR==1 { printf "%s %s",$1,"'$BOLD'"; for (i=2;i<NF;i++) printf "%s ",$i ; print "'$OFF'" $NF }
                NF==2 {print;}
                /->/ {
                split($0, flds, FS, seps)
                printf "%s%s%s%s'$RED'%s'$OFF'%s%s%s'$GREEN'%s'$OFF'%s%s\n",
                        flds[1],seps[1], # left side of box + first space
                        flds[2],seps[2], # package name, spaces
                        flds[3],seps[3], # installed version, spaces
                        flds[4],seps[4], # arrow, spaces
                        flds[5],seps[5],flds[6] # available version, spaces, right side of box
        } END {print}'
    else
        # otherwise just columnify and print
        echo -e "\n$(column -o'   ' -t < "$d_pkgcache/.aurupdates" )\n" \
        | little_boxes -c double -t "Available updates to AUR packages"
    fi
}

__ScriptVersion="0.6"

#===  FUNCTION  ================================================================
#         NAME:  usage
#  DESCRIPTION:  Display usage information.
#===============================================================================
function usage ()
{
    echo "Usage :  $0 [options]
    Show available package upgrades from repos and the AUR

    Options:
    -a      aur-only    Only display aur-package updates
    -A      no-aur      Do not display aur-package updates
    -c      use-cache   Do not check for updates from AUR; instead,
                            display cached results from last check.
    -n      no-color    Disable colored output
    
    -h      help        Display this message
    -v      version     Display script version"

}    # ----------  end of function usage  ----------

#-----------------------------------------------------------------------
#  Handle command line arguments
#-----------------------------------------------------------------------

while getopts ":hvaAcn" opt
do
  case $opt in
    a) Uoptions['U']=0 ;;

    A) Uoptions['A']=0 ;;

    c) Uoptions['C']=1 ;;
    
    n) Uoptions['c']=0 ;;

    h  )  usage; exit 0   ;;

    v  )  echo "$0 -- Version $__ScriptVersion"; exit 0   ;;

    * )  echo -e "\n  Option does not exist : $OPTARG\n"
          usage; exit 1   ;;

  esac    # --- end of case ---
done
shift $(($OPTIND-1))


[[ ${Uoptions['U']} -gt 0 ]] && updates
[[ ${Uoptions['A']} -gt 0 ]] && aurpdates
